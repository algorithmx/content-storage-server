basePath: /
definitions:
  internal_handlers.SwaggerBackupRequest:
    description: Request body for creating manual backups
    properties:
      backup_name:
        description: Optional backup name
        example: manual-backup-2024
        type: string
      immediate:
        description: Whether to create backup immediately
        example: true
        type: boolean
    type: object
  internal_handlers.SwaggerBackupResponse:
    description: Response for backup creation with details
    properties:
      data:
        properties:
          backup_path:
            example: /path/to/backup
            type: string
          backup_size_bytes:
            example: 1024000
            type: integer
          created_at:
            example: "2024-01-01T00:00:00Z"
            type: string
          message:
            example: Backup created successfully
            type: string
          success:
            example: true
            type: boolean
        type: object
      message:
        example: Backup created successfully
        type: string
      success:
        example: true
        type: boolean
    type: object
  internal_handlers.SwaggerCleanupResponse:
    description: Response for access tracker cleanup operations
    properties:
      data:
        description: Cleanup operation data
        properties:
          duration_ms:
            description: Duration of the cleanup operation in milliseconds
            example: 25
            type: integer
          removed_trackers:
            description: Number of removed trackers
            example: 15
            type: integer
        type: object
      message:
        description: Response message
        example: Access tracker cleanup completed successfully
        type: string
      success:
        description: Operation success status
        example: true
        type: boolean
    type: object
  internal_handlers.SwaggerContent:
    description: Stored content with metadata and access tracking
    properties:
      access_count:
        description: Current access count
        example: 3
        type: integer
      access_limit:
        description: Access limit
        example: 10
        type: integer
      created_at:
        description: Creation timestamp
        example: "2024-01-01T00:00:00Z"
        type: string
      data:
        description: Content data
        example: Hello, World!
        type: string
      expires_at:
        description: Expiration timestamp
        example: "2024-12-31T23:59:59Z"
        type: string
      id:
        description: Content ID
        example: user-123-document
        type: string
      tag:
        description: Content tag
        example: user-documents
        type: string
      type:
        description: Content type
        example: text/plain
        type: string
    type: object
  internal_handlers.SwaggerContentListResponse:
    description: Response for content listing with pagination and filtering
    properties:
      data:
        properties:
          contents:
            description: Array of content items
            items:
              $ref: '#/definitions/internal_handlers.SwaggerContent'
            type: array
          filters:
            additionalProperties:
              type: string
            description: Applied filters
            example:
              '"include_expired"': '"false"}'
              '{"type"': '"text/plain"'
            type: object
          limit:
            description: 'Number of items per page (limited by configuration, max:
              1000)'
            example: 50
            type: integer
          offset:
            description: Number of items skipped
            example: 0
            type: integer
          total:
            description: Total number of items matching the filter
            example: 150
            type: integer
        type: object
      message:
        example: Content listed successfully
        type: string
      success:
        example: true
        type: boolean
    type: object
  internal_handlers.SwaggerContentStatusResponse:
    description: Content storage status response
    properties:
      data:
        description: Status data
        properties:
          id:
            description: Content ID
            example: user-123-document
            type: string
          status:
            description: 'Storage status: queued, stored, or not_found'
            example: stored
            type: string
        type: object
      message:
        description: Response message
        example: Content status retrieved successfully
        type: string
      success:
        description: Operation success status
        example: true
        type: boolean
    type: object
  internal_handlers.SwaggerCountResponse:
    description: Response for content count endpoint
    properties:
      data:
        properties:
          count:
            example: 42
            type: integer
        type: object
      message:
        example: Content count retrieved successfully
        type: string
      success:
        example: true
        type: boolean
    type: object
  internal_handlers.SwaggerDetailedHealthResponse:
    description: Detailed health check with comprehensive system metrics
    properties:
      metrics:
        description: Comprehensive metrics
        properties:
          backup_status:
            example: healthy
            type: string
          content_count:
            example: 42
            type: integer
          database_status:
            example: healthy
            type: string
          disk_usage:
            example: 5120000
            type: integer
          gc_status:
            example: healthy
            type: string
          last_backup:
            example: "2024-01-01T00:00:00Z"
            type: string
          memory_usage:
            example: 1024000
            type: integer
        type: object
      status:
        description: System status
        example: healthy
        type: string
      timestamp:
        description: Response timestamp
        example: "2024-01-01T00:00:00Z"
        type: string
      uptime:
        description: Server uptime
        example: 1h30m45s
        type: string
    type: object
  internal_handlers.SwaggerErrorResponse:
    description: Standard error response format
    properties:
      data:
        description: Error details
        properties:
          error:
            example: Content size exceeds maximum allowed size
            type: string
        type: object
      message:
        description: Error message
        example: Validation failed
        type: string
      success:
        description: Success indicator (always false for errors)
        example: false
        type: boolean
    type: object
  internal_handlers.SwaggerGCResponse:
    description: Response for manual garbage collection operations
    properties:
      data:
        description: GC operation data
        properties:
          duration:
            description: Duration of the GC operation
            example: 150ms
            type: string
        type: object
      message:
        description: Response message
        example: Garbage collection completed successfully
        type: string
      success:
        description: Operation success status
        example: true
        type: boolean
    type: object
  internal_handlers.SwaggerHealthResponse:
    description: Health check response with system status
    properties:
      metrics:
        description: Basic metrics
        properties:
          content_count:
            example: 42
            type: integer
        type: object
      status:
        description: System status
        example: healthy
        type: string
      timestamp:
        description: Response timestamp
        example: "2024-01-01T00:00:00Z"
        type: string
      uptime:
        description: Server uptime
        example: 1h30m45s
        type: string
    type: object
  internal_handlers.SwaggerMetricsResponse:
    description: Comprehensive system metrics and statistics
    properties:
      backup_count:
        example: 7
        type: integer
      backup_stats:
        properties:
          last_backup_size:
            example: 1024000
            type: integer
          total_backups:
            example: 7
            type: integer
        type: object
      content_count:
        example: 42
        type: integer
      database_size_bytes:
        example: 5120000
        type: integer
      gc_stats:
        properties:
          avg_duration_ms:
            example: 150
            type: integer
          last_run:
            example: "2024-01-01T00:00:00Z"
            type: string
          runs_count:
            example: 10
            type: integer
        type: object
      health_status:
        example: healthy
        type: string
      last_backup:
        example: "2024-01-01T00:00:00Z"
        type: string
      queue_metrics:
        properties:
          queue_depth:
            example: 5
            type: integer
          total_errors:
            example: 0
            type: integer
          total_processed:
            example: 1245
            type: integer
          total_queued:
            example: 1250
            type: integer
        type: object
    type: object
  internal_handlers.SwaggerStorageRequest:
    description: Request body for storing content with configuration-dependent validation
    properties:
      access_limit:
        description: 'Optional access limit - content becomes inaccessible after this
          many retrievals (max: 1,000,000)'
        example: 10
        type: integer
      data:
        description: 'Content data - any JSON type, size limited by MAX_CONTENT_SIZE
          configuration (default: 10MB)'
        example: Hello, World!
        type: string
      expires_at:
        description: Optional expiration time - content becomes inaccessible after
          this time
        example: "2024-12-31T23:59:59Z"
        type: string
      id:
        description: Content ID - must be unique, alphanumeric with dots, hyphens,
          underscores (max 255 chars)
        example: user-123-document
        type: string
      tag:
        description: Optional tag for categorization and filtering
        example: user-documents
        type: string
      type:
        description: 'Content type - validated against ALLOWED_CONTENT_TYPES configuration
          (default: application/json,text/plain)'
        example: text/plain
        type: string
    required:
    - id
    - type
    type: object
  internal_handlers.SwaggerSuccessResponse:
    description: Standard success response format
    properties:
      data:
        additionalProperties: true
        description: Response data (varies by endpoint)
        type: object
      message:
        description: Success message
        example: Operation completed successfully
        type: string
      success:
        description: Success indicator
        example: true
        type: boolean
    type: object
host: localhost:8081
info:
  contact:
    email: support@example.com
    name: API Support
    url: https://example.com/support
  description: |
    A high-performance content storage server with enterprise features including expiration, access limits, backup management, and sequential write processing.

    ## Configuration Impact on API Behavior

    The server behavior is heavily influenced by environment configuration:

    ### Authentication (ENABLE_AUTH)
    - When `ENABLE_AUTH=true`: All API endpoints except `/health`, `/health/detailed`, `/ping`, and `/debug/*` require authentication
    - Authentication methods: `X-API-Key` header or `api_key` query parameter
    - When `ENABLE_AUTH=false`: All endpoints are publicly accessible

    ### Content Size Limits (MAX_CONTENT_SIZE)
    - Default: 10MB (10485760 bytes)
    - All content storage operations validate against this limit
    - Exceeding this limit returns HTTP 400 with validation error

    ### Rate Limiting (THROTTLE_LIMIT, THROTTLE_BACKLOG_LIMIT)
    - `THROTTLE_LIMIT`: Maximum concurrent requests (default: 1000)
    - `THROTTLE_BACKLOG_LIMIT`: Maximum queued requests (default: 50)
    - Exceeding limits returns HTTP 429 Too Many Requests

    ### Content Type Restrictions (ALLOWED_CONTENT_TYPES)
    - Default: `application/json,text/plain`
    - Only specified content types are accepted for requests
    - Invalid content types return HTTP 415 Unsupported Media Type

    ### Compression (ENABLE_COMPRESSION, COMPRESSION_LEVEL)
    - When enabled, responses are compressed based on Accept-Encoding header
    - Compression level affects CPU usage vs bandwidth trade-off

    ### Backup & Storage Reliability
    - `BACKUP_INTERVAL`: Automated backup frequency (default: 6h)
    - `GC_INTERVAL`: Garbage collection frequency (default: 5m)
    - `PERFORMANCE_MODE`: Enable performance optimizations (default: true)
    - Sequential write processing ensures data consistency and emergency shutdown capabilities

    ### Emergency Shutdown & Recovery
    - `ENABLE_EMERGENCY_RECOVERY`: Enable automatic recovery from emergency shutdowns (default: true)
    - Emergency shutdown preserves volatile queue state for automatic recovery on restart
    - Graceful shutdown (SIGTERM, single Ctrl+C): Waits for pending operations with 30s timeout
    - Emergency shutdown (SIGUSR1, double Ctrl+C): Immediate termination with state preservation
    - Recovery files stored in `backups/emergency-recovery/` with automatic archival after processing

    ### Write Queue System
    - `WRITE_QUEUE_SIZE`: Maximum queue capacity (default: 1000, auto-doubles when full)
    - `WRITE_QUEUE_BATCH_SIZE`: Items processed per batch (default: 10)
    - `WRITE_QUEUE_BATCH_TIMEOUT`: Maximum wait before processing partial batch (default: 100ms)
    - Sequential processing prevents race conditions and ensures data consistency
    - Queue metrics available via `/api/v1/metrics` endpoint for monitoring
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: https://example.com/terms/
  title: Content Storage Server API
  version: "1.0"
paths:
  /api/v1/backup:
    post:
      consumes:
      - application/json
      description: |-
        Create a manual backup of the database with optional configuration, comprehensive logging, and detailed response information

        ## Configuration Dependencies:
        - **ENABLE_AUTH**: Requires authentication when enabled
        - **THROTTLE_LIMIT**: May return 429 if rate limit exceeded
        - **BACKUP_DIR**: Determines where backups are stored (from server configuration)
        - **Storage backend dependent** - Only supported for BadgerDB storage

        ## Request Parameters:
        - **backup_name**: Optional custom backup name (defaults to timestamp-based naming)
        - **immediate**: Optional flag to force immediate backup (defaults to true)
        - Invalid JSON in request body defaults to immediate backup with auto-generated name

        ## Backup Process:
        - Creates immediate backup regardless of BACKUP_INTERVAL schedule
        - Backup includes all current data, metadata, and access tracking information
        - Returns detailed backup information including path, size, and creation time
        - Operation duration varies with database size (logged for monitoring)
        - Comprehensive request logging with client IP, request ID, and user agent

        ## Response Information:
        - Backup path and file size from storage backend
        - Creation timestamp and operation duration
        - Backup statistics for monitoring and verification
      parameters:
      - description: Backup configuration (optional)
        in: body
        name: backup
        schema:
          $ref: '#/definitions/internal_handlers.SwaggerBackupRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Backup created successfully
          schema:
            $ref: '#/definitions/internal_handlers.SwaggerBackupResponse'
        "401":
          description: Authentication required (when ENABLE_AUTH=true)
          schema:
            $ref: '#/definitions/internal_handlers.SwaggerErrorResponse'
        "429":
          description: Rate limit exceeded (THROTTLE_LIMIT)
          schema:
            $ref: '#/definitions/internal_handlers.SwaggerErrorResponse'
        "500":
          description: Backup operation failed
          schema:
            $ref: '#/definitions/internal_handlers.SwaggerErrorResponse'
        "501":
          description: Backup not supported for storage type
          schema:
            $ref: '#/definitions/internal_handlers.SwaggerErrorResponse'
      security:
      - ApiKeyAuth: []
      - ApiKeyQuery: []
      summary: Create manual database backup with comprehensive monitoring
      tags:
      - Management Operations
  /api/v1/cleanup:
    post:
      consumes:
      - application/json
      description: |-
        Manually trigger cleanup of stale access trackers to prevent memory leaks

        ## Configuration Dependencies:
        - **ENABLE_AUTH**: Requires authentication when enabled
        - **THROTTLE_LIMIT**: May return 429 if rate limit exceeded
        - **Storage backend dependent** - Only supported for BadgerDB storage

        ## Behavior:
        - Removes stale access tracking data for non-existent content
        - Prevents memory leaks from accumulating access counters
        - Returns count of removed trackers and operation duration
        - Safe to run during normal operations
      produces:
      - application/json
      responses:
        "200":
          description: Cleanup completed successfully
          schema:
            $ref: '#/definitions/internal_handlers.SwaggerCleanupResponse'
        "401":
          description: Authentication required (when ENABLE_AUTH=true)
          schema:
            $ref: '#/definitions/internal_handlers.SwaggerErrorResponse'
        "429":
          description: Rate limit exceeded (THROTTLE_LIMIT)
          schema:
            $ref: '#/definitions/internal_handlers.SwaggerErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/internal_handlers.SwaggerErrorResponse'
      security:
      - ApiKeyAuth: []
      - ApiKeyQuery: []
      summary: Cleanup access trackers
      tags:
      - Management Operations
  /api/v1/content:
    get:
      consumes:
      - application/json
      description: |-
        List all content with support for pagination, advanced filtering, and real-time access count information

        ## Configuration Dependencies:
        - **ENABLE_AUTH**: Requires authentication when enabled
        - **THROTTLE_LIMIT**: May return 429 if rate limit exceeded
        - **ENABLE_COMPRESSION**: Response may be compressed based on Accept-Encoding

        ## Pagination:
        - Default limit: 100, maximum: 1000 (hardcoded limit for performance)
        - Use offset for pagination through large result sets
        - Returns total count for pagination metadata

        ## Advanced Filtering:
        - **type**: Filter by MIME type (e.g., "application/json", "text/plain")
        - **tag**: Filter by content tag/classifier
        - **created_after**: Filter content created after timestamp (RFC3339 format)
        - **created_before**: Filter content created before timestamp (RFC3339 format)
        - **include_expired**: Include expired content in results (default: false)

        ## Access Count Integration:
        - Each content item includes real-time access_count from separate tracking system
        - Access counts are retrieved efficiently for all returned items
        - Expiration status is calculated using current access counts

        ## Filtering Options:
        - **type**: Filter by content type (e.g., "text/plain")
        - **tag**: Filter by content tag
        - **created_after**: Filter content created after timestamp (RFC3339)
        - **created_before**: Filter content created before timestamp (RFC3339)
        - **include_expired**: Include expired content (default: false)
      parameters:
      - default: 100
        description: 'Number of items per page (max: 1000)'
        example: 50
        in: query
        name: limit
        type: integer
      - default: 0
        description: Number of items to skip
        example: 0
        in: query
        name: offset
        type: integer
      - description: Filter by content type
        example: '"text/plain"'
        in: query
        name: type
        type: string
      - description: Filter by content tag
        example: '"user-documents"'
        in: query
        name: tag
        type: string
      - description: Filter content created after (RFC3339)
        example: '"2024-01-01T00:00:00Z"'
        in: query
        name: created_after
        type: string
      - description: Filter content created before (RFC3339)
        example: '"2024-12-31T23:59:59Z"'
        in: query
        name: created_before
        type: string
      - default: false
        description: Include expired content
        example: false
        in: query
        name: include_expired
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: Content listed successfully
          schema:
            $ref: '#/definitions/internal_handlers.SwaggerContentListResponse'
        "400":
          description: Invalid pagination or filter parameters
          schema:
            $ref: '#/definitions/internal_handlers.SwaggerErrorResponse'
        "401":
          description: Authentication required (when ENABLE_AUTH=true)
          schema:
            $ref: '#/definitions/internal_handlers.SwaggerErrorResponse'
        "429":
          description: Rate limit exceeded (THROTTLE_LIMIT)
          schema:
            $ref: '#/definitions/internal_handlers.SwaggerErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/internal_handlers.SwaggerErrorResponse'
      security:
      - ApiKeyAuth: []
      - ApiKeyQuery: []
      summary: List content with advanced filtering and access count tracking
      tags:
      - Content Operations
    post:
      consumes:
      - application/json
      description: |-
        Store new content in the system using sequential write queue for data consistency and emergency shutdown capabilities

        ## Configuration Dependencies:
        - **MAX_CONTENT_SIZE**: Validates content size (default: 10MB)
        - **ALLOWED_CONTENT_TYPES**: Validates request content type (default: application/json,text/plain)
        - **ENABLE_AUTH**: Requires authentication when enabled
        - **THROTTLE_LIMIT**: May return 429 if rate limit exceeded
        - **PERFORMANCE_MODE**: Enables optimized validation when true (default: true)

        ## Sequential Write Processing:
        - Content is queued for sequential processing to ensure data consistency
        - Returns HTTP 202 (Accepted) immediately after validation and queuing
        - Use GET /api/v1/content/{id}/status to check storage completion
        - Emergency shutdown capabilities preserve queued content

        ## Validation Rules:
        - ID: Required, max 255 chars, alphanumeric with dots/hyphens/underscores, no dangerous path patterns
        - Data: Required, non-empty, size limited by MAX_CONTENT_SIZE
        - Type: Required, must match ALLOWED_CONTENT_TYPES, follows MIME type format
        - Tag: Optional, max 100 chars, alphanumeric with dots/hyphens/underscores
        - AccessLimit: Optional, 0-1,000,000, content expires after this many retrievals
        - ExpiresAt: Optional, RFC3339 format, cannot be in the past, max 10 years in future
      parameters:
      - description: Content to store
        in: body
        name: content
        required: true
        schema:
          $ref: '#/definitions/internal_handlers.SwaggerStorageRequest'
      produces:
      - application/json
      responses:
        "202":
          description: Content queued for storage
          schema:
            $ref: '#/definitions/internal_handlers.SwaggerSuccessResponse'
        "400":
          description: Validation failed or invalid request
          schema:
            $ref: '#/definitions/internal_handlers.SwaggerErrorResponse'
        "401":
          description: Authentication required (when ENABLE_AUTH=true)
          schema:
            $ref: '#/definitions/internal_handlers.SwaggerErrorResponse'
        "413":
          description: Content size exceeds MAX_CONTENT_SIZE limit
          schema:
            $ref: '#/definitions/internal_handlers.SwaggerErrorResponse'
        "415":
          description: Content type not in ALLOWED_CONTENT_TYPES
          schema:
            $ref: '#/definitions/internal_handlers.SwaggerErrorResponse'
        "429":
          description: Rate limit exceeded (THROTTLE_LIMIT)
          schema:
            $ref: '#/definitions/internal_handlers.SwaggerErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/internal_handlers.SwaggerErrorResponse'
      security:
      - ApiKeyAuth: []
      - ApiKeyQuery: []
      summary: Store new content with sequential write processing
      tags:
      - Content Operations
  /api/v1/content/{id}:
    delete:
      consumes:
      - application/json
      description: |-
        Delete specific content by ID from the storage system with intelligent retry logic for write conflicts

        ## Configuration Dependencies:
        - **ENABLE_AUTH**: Requires authentication when enabled
        - **THROTTLE_LIMIT**: May return 429 if rate limit exceeded
        - **ENABLE_WARN_LOGGING**: Controls retry attempt logging verbosity

        ## Write Conflict Handling:
        - Automatically retries deletion if content is currently being written to queue
        - Uses WaitForContentWrite to wait for ongoing write operations to complete
        - Maximum 3 retry attempts with 100ms delay between attempts
        - 5-second timeout per write completion wait

        ## Behavior:
        - Permanently removes content from storage and cleans up access tracking
        - Returns 404 if content not found
        - Validates ID format before deletion (same rules as GET/POST)
        - Handles race conditions with concurrent write operations gracefully
      parameters:
      - description: Content ID to delete
        example: '"user-123-document"'
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Content deleted successfully
          schema:
            $ref: '#/definitions/internal_handlers.SwaggerSuccessResponse'
        "400":
          description: Invalid content ID format
          schema:
            $ref: '#/definitions/internal_handlers.SwaggerErrorResponse'
        "401":
          description: Authentication required (when ENABLE_AUTH=true)
          schema:
            $ref: '#/definitions/internal_handlers.SwaggerErrorResponse'
        "404":
          description: Content not found
          schema:
            $ref: '#/definitions/internal_handlers.SwaggerErrorResponse'
        "429":
          description: Rate limit exceeded (THROTTLE_LIMIT)
          schema:
            $ref: '#/definitions/internal_handlers.SwaggerErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/internal_handlers.SwaggerErrorResponse'
      security:
      - ApiKeyAuth: []
      - ApiKeyQuery: []
      summary: Delete content by ID with write conflict handling
      tags:
      - Content Operations
    get:
      consumes:
      - application/json
      description: |-
        Retrieve specific content by ID with atomic access count increment and expiration checking

        ## Configuration Dependencies:
        - **ENABLE_AUTH**: Requires authentication when enabled
        - **THROTTLE_LIMIT**: May return 429 if rate limit exceeded
        - **ENABLE_COMPRESSION**: Response may be compressed based on Accept-Encoding

        ## Atomic Access Tracking:
        - Access count increment and expiration check are handled atomically in storage layer
        - Prevents race conditions between access counting and expiration validation
        - Access count is tracked separately from content data for performance

        ## Expiration Behavior:
        - Returns 404 if content not found or time-expired
        - Returns 410 if content has reached its access limit (access_count > access_limit)
        - Time-based expiration: content expires after ExpiresAt timestamp
        - Access-based expiration: content expires when access count exceeds AccessLimit

        ## ID Validation:
        - Must be alphanumeric with dots, hyphens, underscores only
        - No dangerous path patterns (no "..", leading/trailing dots)
        - Maximum 255 characters, valid UTF-8
      parameters:
      - description: Content ID
        example: '"user-123-document"'
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Content retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/internal_handlers.SwaggerSuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/internal_handlers.SwaggerContent'
              type: object
        "400":
          description: Invalid content ID format
          schema:
            $ref: '#/definitions/internal_handlers.SwaggerErrorResponse'
        "401":
          description: Authentication required (when ENABLE_AUTH=true)
          schema:
            $ref: '#/definitions/internal_handlers.SwaggerErrorResponse'
        "404":
          description: Content not found or expired
          schema:
            $ref: '#/definitions/internal_handlers.SwaggerErrorResponse'
        "410":
          description: Content access limit reached
          schema:
            $ref: '#/definitions/internal_handlers.SwaggerErrorResponse'
        "429":
          description: Rate limit exceeded (THROTTLE_LIMIT)
          schema:
            $ref: '#/definitions/internal_handlers.SwaggerErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/internal_handlers.SwaggerErrorResponse'
      security:
      - ApiKeyAuth: []
      - ApiKeyQuery: []
      summary: Retrieve content by ID with atomic access tracking
      tags:
      - Content Operations
  /api/v1/content/{id}/status:
    get:
      consumes:
      - application/json
      description: |-
        Check the current storage status of content with visibility into sequential write queue processing

        ## Configuration Dependencies:
        - **ENABLE_AUTH**: Requires authentication when enabled
        - **THROTTLE_LIMIT**: May return 429 if rate limit exceeded
        - **Storage backend dependent**: Queue checking only available for BadgerDB storage

        ## Status Values and Processing Flow:
        - **queued**: Content is in write queue awaiting sequential processing (HTTP 200)
        - **stored**: Content is persisted to disk and available for retrieval (HTTP 200)
        - **not_found**: Content ID does not exist in system or queue (HTTP 404)

        ## Use Cases:
        - Monitor async content storage completion after POST /api/v1/content
        - Verify content availability before attempting retrieval
        - Debug storage pipeline issues and queue processing delays
        - Implement polling-based confirmation of content persistence
      parameters:
      - description: Content ID to check status
        example: '"user-123-document"'
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Content status retrieved successfully
          schema:
            $ref: '#/definitions/internal_handlers.SwaggerContentStatusResponse'
        "400":
          description: Invalid content ID format
          schema:
            $ref: '#/definitions/internal_handlers.SwaggerErrorResponse'
        "401":
          description: Authentication required (when ENABLE_AUTH=true)
          schema:
            $ref: '#/definitions/internal_handlers.SwaggerErrorResponse'
        "404":
          description: Content not found
          schema:
            $ref: '#/definitions/internal_handlers.SwaggerErrorResponse'
        "429":
          description: Rate limit exceeded (THROTTLE_LIMIT)
          schema:
            $ref: '#/definitions/internal_handlers.SwaggerErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/internal_handlers.SwaggerErrorResponse'
      security:
      - ApiKeyAuth: []
      - ApiKeyQuery: []
      summary: Get content storage status with queue visibility
      tags:
      - Content Operations
  /api/v1/content/count:
    get:
      consumes:
      - application/json
      description: |-
        Get the total number of stored content items in the system using optimized storage-level counting

        ## Configuration Dependencies:
        - **ENABLE_AUTH**: Requires authentication when enabled
        - **THROTTLE_LIMIT**: May return 429 if rate limit exceeded
        - **ENABLE_COMPRESSION**: Response may be compressed based on Accept-Encoding

        ## Performance Characteristics:
        - Fast operation using storage-level counting (no iteration required)
        - Returns total count of all content items (including expired and access-limited)
        - Does not include queued items that haven't been persisted yet
        - Consistent with database state, not affected by write queue contents
      produces:
      - application/json
      responses:
        "200":
          description: Content count retrieved successfully
          schema:
            $ref: '#/definitions/internal_handlers.SwaggerCountResponse'
        "401":
          description: Authentication required (when ENABLE_AUTH=true)
          schema:
            $ref: '#/definitions/internal_handlers.SwaggerErrorResponse'
        "429":
          description: Rate limit exceeded (THROTTLE_LIMIT)
          schema:
            $ref: '#/definitions/internal_handlers.SwaggerErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/internal_handlers.SwaggerErrorResponse'
      security:
      - ApiKeyAuth: []
      - ApiKeyQuery: []
      summary: Get total content count with storage-level optimization
      tags:
      - Content Operations
  /api/v1/gc:
    post:
      consumes:
      - application/json
      description: |-
        Manually trigger database garbage collection to reclaim disk space and optimize performance

        ## Configuration Dependencies:
        - **ENABLE_AUTH**: Requires authentication when enabled
        - **THROTTLE_LIMIT**: May return 429 if rate limit exceeded
        - **Storage backend dependent** - Only supported for BadgerDB storage

        ## Behavior:
        - Forces immediate garbage collection on the database
        - Reclaims disk space from deleted or expired content
        - May temporarily impact performance during operation
        - Operation duration varies based on database size
      produces:
      - application/json
      responses:
        "200":
          description: Garbage collection completed successfully
          schema:
            $ref: '#/definitions/internal_handlers.SwaggerGCResponse'
        "401":
          description: Authentication required (when ENABLE_AUTH=true)
          schema:
            $ref: '#/definitions/internal_handlers.SwaggerErrorResponse'
        "429":
          description: Rate limit exceeded (THROTTLE_LIMIT)
          schema:
            $ref: '#/definitions/internal_handlers.SwaggerErrorResponse'
        "500":
          description: Garbage collection failed
          schema:
            $ref: '#/definitions/internal_handlers.SwaggerErrorResponse'
      security:
      - ApiKeyAuth: []
      - ApiKeyQuery: []
      summary: Trigger manual garbage collection
      tags:
      - Management Operations
  /api/v1/metrics:
    get:
      consumes:
      - application/json
      description: |-
        Retrieve detailed system metrics including storage health, performance statistics, and operational intelligence for monitoring and alerting

        ## Configuration Dependencies:
        - **ENABLE_AUTH**: Requires authentication when enabled
        - **THROTTLE_LIMIT**: May return 429 if rate limit exceeded
        - **Storage backend dependent** - Metrics vary based on storage implementation
        - **Backup configuration** - Backup stats depend on BACKUP_INTERVAL and backup settings

        ## BadgerDB Metrics Categories:
        - **Content Statistics**: Total count, database size, growth trends
        - **Storage Health**: Database health status, corruption detection, disk usage
        - **Backup System**: Last backup time, backup count, backup success rate, backup sizes
        - **Garbage Collection**: Run frequency, duration statistics, space reclaimed, efficiency
        - **Access Management**: Active tracker count, cleanup statistics, memory usage
        - **System Health**: Overall health status (healthy/degraded/unhealthy)

        ## Health Status Determination:
        - **healthy**: All systems operating within normal parameters
        - **degraded**: Some systems showing performance issues but functional
        - **unhealthy**: Critical systems failing or corrupted

        ## Use Cases:
        - Monitoring dashboards and alerting systems
        - Performance analysis and capacity planning
        - Troubleshooting storage and performance issues
        - Automated health checks and SLA monitoring
      produces:
      - application/json
      responses:
        "200":
          description: Metrics retrieved successfully
          schema:
            $ref: '#/definitions/internal_handlers.SwaggerMetricsResponse'
        "401":
          description: Authentication required (when ENABLE_AUTH=true)
          schema:
            $ref: '#/definitions/internal_handlers.SwaggerErrorResponse'
        "429":
          description: Rate limit exceeded (THROTTLE_LIMIT)
          schema:
            $ref: '#/definitions/internal_handlers.SwaggerErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/internal_handlers.SwaggerErrorResponse'
      security:
      - ApiKeyAuth: []
      - ApiKeyQuery: []
      summary: Get comprehensive system metrics with operational intelligence
      tags:
      - Health & Monitoring
  /api/v1/sync:
    post:
      consumes:
      - application/json
      description: |-
        Manually trigger a database synchronization operation with comprehensive logging and monitoring

        ## Configuration Dependencies:
        - **ENABLE_AUTH**: Requires authentication when enabled
        - **THROTTLE_LIMIT**: May return 429 if rate limit exceeded
        - **Storage backend dependent** - Sync behavior varies by storage implementation

        ## Current Implementation:
        - **Stub implementation**: No actual synchronization logic is performed
        - Comprehensive request logging with client IP, request ID, and user agent
        - Duration tracking for monitoring and performance analysis
        - Always returns success for compatibility with monitoring systems

        ## Future Enhancement:
        - Intended for database synchronization operations
        - May improve performance after heavy write operations
        - Could include write queue flushing and database consistency checks
      produces:
      - application/json
      responses:
        "200":
          description: Sync completed successfully
          schema:
            $ref: '#/definitions/internal_handlers.SwaggerSuccessResponse'
        "401":
          description: Authentication required (when ENABLE_AUTH=true)
          schema:
            $ref: '#/definitions/internal_handlers.SwaggerErrorResponse'
        "429":
          description: Rate limit exceeded (THROTTLE_LIMIT)
          schema:
            $ref: '#/definitions/internal_handlers.SwaggerErrorResponse'
        "500":
          description: Sync operation failed
          schema:
            $ref: '#/definitions/internal_handlers.SwaggerErrorResponse'
      security:
      - ApiKeyAuth: []
      - ApiKeyQuery: []
      summary: Trigger manual database synchronization (stub implementation)
      tags:
      - Management Operations
  /health:
    get:
      consumes:
      - application/json
      description: |-
        Simple health check endpoint that verifies server responsiveness and basic storage connectivity for load balancers and monitoring systems

        ## Configuration Dependencies:
        - **No authentication required** - Always accessible regardless of ENABLE_AUTH setting
        - **No rate limiting applied** - Excluded from THROTTLE_LIMIT restrictions
        - **Storage type independent** - Works with any storage backend

        ## Health Verification:
        - Verifies server process is responding to HTTP requests
        - Tests basic storage connectivity by performing a count operation
        - Returns server uptime since startup for monitoring purposes
        - Always returns HTTP 200 if server can respond (fail-safe design)

        ## Response Data:
        - status: Always "healthy" (indicates server responsiveness)
        - timestamp: Current server time in RFC3339 format
        - uptime: Duration since server startup
        - metrics.content_count: Total content items (verifies storage connectivity)
      produces:
      - application/json
      responses:
        "200":
          description: Server is healthy and storage is accessible
          schema:
            $ref: '#/definitions/internal_handlers.SwaggerHealthResponse'
      summary: Basic health check with storage connectivity verification
      tags:
      - Health & Monitoring
  /health/detailed:
    get:
      consumes:
      - application/json
      description: |-
        Comprehensive health check with detailed system metrics, storage diagnostics, and adaptive HTTP status codes

        ## Configuration Dependencies:
        - **No authentication required** - Always accessible regardless of ENABLE_AUTH setting
        - **No rate limiting applied** - Excluded from THROTTLE_LIMIT restrictions
        - **Storage type dependent** - Returns different metrics based on storage backend

        ## BadgerDB-Specific Diagnostics:
        - Database health metrics (size, corruption detection, performance)
        - Backup system status (last backup time, backup count, backup health)
        - Garbage collection statistics (frequency, duration, effectiveness)
        - Write queue health (queue depth, processing rate, emergency status)
        - Access manager statistics (tracker count, cleanup frequency)

        ## Adaptive HTTP Status Codes:
        - **200 OK**: All systems healthy and performing optimally
        - **206 Partial Content**: System degraded but functional (high queue depth, slow GC, etc.)
        - **503 Service Unavailable**: System unhealthy (database corruption, backup failures, etc.)

        ## Fallback for Other Storage Types:
        - Returns basic metrics (content count, storage type) for non-BadgerDB backends
        - Always returns HTTP 200 for unknown storage types
      produces:
      - application/json
      responses:
        "200":
          description: System is healthy
          schema:
            $ref: '#/definitions/internal_handlers.SwaggerDetailedHealthResponse'
        "206":
          description: System is degraded
          schema:
            $ref: '#/definitions/internal_handlers.SwaggerDetailedHealthResponse'
        "503":
          description: System is unhealthy
          schema:
            $ref: '#/definitions/internal_handlers.SwaggerDetailedHealthResponse'
      summary: Detailed health check with comprehensive system diagnostics
      tags:
      - Health & Monitoring
schemes:
- http
- https
securityDefinitions:
  ApiKeyAuth:
    description: API key authentication. Required when ENABLE_AUTH=true. Can also
      be provided as 'api_key' query parameter.
    in: header
    name: X-API-Key
    type: apiKey
  ApiKeyQuery:
    description: API key authentication via query parameter. Alternative to X-API-Key
      header.
    in: query
    name: api_key
    type: apiKey
swagger: "2.0"
