# HTTPS Configuration Example
# Copy this file to .env and modify for your setup

# =============================================================================
# HTTPS/TLS SETTINGS
# =============================================================================

# Enable HTTPS with automatic Let's Encrypt certificates
ENABLE_TLS=false

# HTTPS port (default: 443)
# Use 8443 for development without root privileges
TLS_PORT=8443

# Directory to cache TLS certificates (important for rate limits)
TLS_CACHE_DIR=./certs

# Allowed hostnames for TLS certificates (comma-separated)
# Leave empty for development (allows any domain)
# REQUIRED for production security
TLS_HOSTS=""

# Redirect all HTTP traffic to HTTPS
ENABLE_HTTPS_ONLY=false

# =============================================================================
# BASIC SERVER SETTINGS
# =============================================================================
# Content Storage Server Configuration
# Production-ready configuration with security and reliability optimizations
# Based on the latest config.go structure with all configuration groups

# =============================================================================
# GROUP 1: HTTP SERVER SETTINGS
# =============================================================================
PORT=8082                 # Standard port (matches config.go default)
HOST=0.0.0.0             # Bind to all interfaces
READ_TIMEOUT=30s         # Standard timeout (matches config.go default)
WRITE_TIMEOUT=30s        # Standard timeout (matches config.go default)

# =============================================================================
# GROUP 2: STORAGE SYSTEM SETTINGS
# =============================================================================
DATA_DIR=./data
BACKUP_DIR=./backups

# =============================================================================
# GROUP 3: STORAGE RELIABILITY SETTINGS
# =============================================================================
BACKUP_INTERVAL=6h        # Regular backups (matches config.go default)
MAX_BACKUPS=7             # Retain weekly backups (matches config.go default)
ENABLE_ADAPTIVE_GC=false  # Disable adaptive GC for consistent performance during stress tests
GC_INTERVAL=120s           # Very frequent GC for stress test performance
GC_THRESHOLD=0.2

# Emergency recovery settings
ENABLE_EMERGENCY_RECOVERY=true  # Enable automatic recovery from emergency shutdown files on startup

# =============================================================================
# GROUP 4: STORAGE PERFORMANCE SETTINGS
# =============================================================================
PERFORMANCE_MODE=true            # Enable performance optimizations
CACHE_SIZE=134217728            # 128MB cache (matches config.go default)
ENABLE_CACHE_WARMUP=true        # Enable cache warming for consistent startup performance

# Write queue optimization settings (for asynchronous writes)
# Note: Uses single writer to ensure sequential ordering of operations
WRITE_QUEUE_SIZE=10000                   # Increased queue size for better throughput
WRITE_QUEUE_BATCH_SIZE=1000               # Increased batch size for better performance
WRITE_QUEUE_MIN_BATCH_SIZE=5            # Increased minimum batch size
WRITE_QUEUE_BATCH_TIMEOUT=100ms            # Reduced timeout for faster processing
ENABLE_ADAPTIVE_BATCHING=true           # Disabled adaptive batching for consistent performance

# =============================================================================
# GROUP 5: AUTHENTICATION & AUTHORIZATION SETTINGS
# =============================================================================
# SECURITY WARNING: Set a strong API key and enable authentication for production
API_KEY=                          # REQUIRED: Set your production API key here
ENABLE_AUTH=false                  # PRODUCTION: Enable authentication for security
ALLOWED_ORIGINS=                  # PRODUCTION: Set specific origins (comma-separated)
ALLOWED_IPS=*

# =============================================================================
# GROUP 6: VALIDATION SETTINGS
# =============================================================================
MAX_ID_LENGTH=255                # Maximum length for content IDs
MAX_TYPE_LENGTH=100              # Maximum length for content types
MAX_PAGINATION_LIMIT=1000        # Maximum pagination limit
MAX_ACCESS_LIMIT=1000000         # Maximum access limit for content

# =============================================================================
# GROUP 7: REQUEST PROCESSING SETTINGS
# =============================================================================
MAX_CONTENT_SIZE=10485760        # 10MB (matches config.go default)
REQUEST_TIMEOUT=30s              # Standard timeout (matches config.go default)
SHUTDOWN_TIMEOUT=30s             # Standard shutdown timeout (matches config.go default)

# =============================================================================
# GROUP 8: RATE LIMITING SETTINGS
# =============================================================================
THROTTLE_LIMIT=40000              # Increased for better performance
THROTTLE_BACKLOG_LIMIT=4000       # Increased backlog for high load
THROTTLE_BACKLOG_TIMEOUT=30s     # Timeout for queued requests (matches config.go default)

# Echo-specific rate limiting
API_RATE_LIMIT_PERIOD=1h         # API rate limit period
API_RATE_LIMIT_BURST=10          # API rate limit burst (matches config.go default)
ECHO_RATE_LIMIT=40000              # Echo API rate limit (matches config.go default)
ECHO_BURST_LIMIT=8000             # Echo API burst limit (matches config.go default)
ECHO_RATE_LIMIT_EXPIRES_IN=3m    # Echo rate limit expiration time

# =============================================================================
# GROUP 9: HTTP COMPRESSION SETTINGS
# =============================================================================
ENABLE_COMPRESSION=true          # Enable compression for bandwidth efficiency
COMPRESSION_LEVEL=5              # Standard compression level (matches config.go default)
COMPRESSION_TYPES=text/html,text/css,text/javascript,application/javascript,application/json,application/xml,text/xml,text/plain

# =============================================================================
# GROUP 10: SECURITY & DEBUGGING SETTINGS
# =============================================================================
ENABLE_PROFILER=false                    # PRODUCTION: Disable profiler for security
ALLOWED_CONTENT_TYPES=application/json,text/plain
SECURITY_HEADERS=X-Content-Type-Options=nosniff,X-Frame-Options=DENY,X-XSS-Protection=1; mode=block

# =============================================================================
# GROUP 11: LOGGING SETTINGS
# =============================================================================

# Selective logging settings (enable appropriate logging for production monitoring)
ENABLE_REQUEST_LOGGING=false            # Request logging (disabled for performance)
ENABLE_MANAGEMENT_LOGGING=true          # PRODUCTION: Enable management operations logging
ENABLE_SECURITY_LOGGING=true            # PRODUCTION: Enable security events logging
ENABLE_CRITICAL_LOGGING=true            # PRODUCTION: Enable critical system events logging
SUPPRESS_CRUD_LOGGING=false             # CRUD operation logging (keep enabled for monitoring)

# Performance-oriented logging controls
ENABLE_ERROR_LOGGING=true               # PRODUCTION: Error-level logging (essential)
ENABLE_WARN_LOGGING=true                # PRODUCTION: Warning-level logging (essential)
ENABLE_VALIDATION_LOGGING=false         # Validation error logging (disabled for performance)

# =============================================================================
# PRODUCTION DEPLOYMENT NOTES
# =============================================================================
# REQUIRED PRODUCTION SETUP:
# 1. Set API_KEY to a strong, unique value
# 2. Configure ALLOWED_ORIGINS with your specific domains
# 3. Optionally set ALLOWED_IPS for IP-based restrictions
# 4. Ensure data and backup directories have proper permissions
# 5. Set up log rotation and monitoring
# 6. Configure resource limits at OS/container level


# SYSTEM RESOURCE OPTIMIZATION (OS/Container Level):
# - GOMAXPROCS: Set to number of CPU cores
# - GOGC: Consider setting to 200-400 for less frequent GC
# - File descriptor limits: Increase to 65536+
# - TCP settings: Optimize for connection throughput

# =============================================================================
# CONFIGURATION NOTES
# =============================================================================
# This configuration provides production-ready defaults with security enabled.
# All values match config.go defaults unless specifically optimized for production.
#
# For high-load scenarios, consider:
# - Increasing CACHE_SIZE and queue sizes
# - Reducing timeouts for faster failure detection
# - Disabling some logging for maximum performance
# - Tuning batch sizes based on workload
#
# For development environments, consider:
# - Setting ENABLE_AUTH=false for easier testing
# - Enabling more detailed logging
# - Using smaller cache and queue sizes
#
# All configuration groups from config.go are represented:
# 1. HTTP Server Settings
# 2. Storage System Settings
# 3. Storage Reliability Settings
# 4. Storage Performance Settings
# 5. Authentication & Authorization Settings
# 6. Validation Settings
# 7. Request Processing Settings
# 8. Rate Limiting Settings
# 9. HTTP Compression Settings
# 10. Security & Debugging Settings
# 11. Logging Settings
#
# Note: Retry and reliability settings removed - retry logic now uses hardcoded values in badger_utils.go

# =============================================================================
# SECURITY CHECKLIST FOR PRODUCTION
# =============================================================================
# ✅ Authentication enabled (ENABLE_AUTH=true)
# ⚠️  API_KEY must be set to a strong value
# ⚠️  ALLOWED_ORIGINS should be set to specific domains
# ✅ Profiler disabled (ENABLE_PROFILER=false)
# ✅ Security headers configured
# ✅ Content type restrictions in place
# ✅ Request size limits configured
# ✅ Rate limiting enabled
# ✅ Appropriate logging enabled for monitoring
